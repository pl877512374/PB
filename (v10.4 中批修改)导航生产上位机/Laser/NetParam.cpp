#include "stdafx.h"
#include "NetParam.h"
#define __NETPARAM_C
 CWinThread *pThread1;

 int g_nNetRecvInd;
 CString LaserMAC = "123";
 CString fileLaserMAC = "123";
 bool f_nav = false;
 bool rec_ang = false;
 char g_cNetRecvBuf[NET_BUF_NUM][10000];
 int g_nNetRecvSize[NET_BUF_NUM];
 u8 BCC_CHECK(u8 *Buf,u16 u16_Check_Length);
  u8 CHECK_BCC(u8 *Buf,u16 u16_Check_Length);
 unsigned  char * ZhiLing(unsigned char *All, unsigned char *pn,int YuLiu);
 NetDataStruct g_sNetData;
 u8 g_u8NetStateCnt;
 CRITICAL_SECTION g_cs_UserMsg;
//状态查询
int g_n32App_QueryStatePibReadLen = 24;
char g_acApp_QueryStatePibReadFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x51, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};
//应用配置参数读取
int g_n32App_ConfigBasicPibULen = 24;
char g_acApp_ConfigBasicPibUFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x55, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};
//应用配置参数下载
int g_n32App_ConfigBasicPibDLen = 24;
char g_acApp_ConfigBasicPibDFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x56, (char)0x4e, (char)0x00, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

//生产APD参数读取
int g_n32Prod_QueryAPDPibReadLen = 24;
char g_acProd_QueryAPDPibReadFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x68, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};
//生产APD参数下载
int g_n32Prod_ConfigAPDPibDLen = 24;
char g_acProd_ConfigAPDPibDFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x67, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

//APD测试标志位
int g_n32Prod_ConfigAPDTestFlagLen = 25;
char g_acProd_ConfigAPDTestFlagBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
, (char)0x73, (char)0x81, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

//APD测试参数上传
int g_n32Prod_ConfigAPDTestULen = 24;
char g_acProd_ConfigAPDTestUFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x77, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};	

//APD测试参数下载
int g_n32Prod_ConfigAPDTestDLen = 24;
char g_acProd_ConfigAPDTestDFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x78, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

int g_n32Prod_ConfigBasicPibULen = 24;
char g_acProd_ConfigBasicPibUFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x64, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

int g_n32Prod_QueryBasicPibReadLen = 24;
char g_acProd_QueryBasicPibReadFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x62, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

int g_n32Prod_ConfigBasicPibDLen = 24;
char g_acProd_ConfigBasicPibDFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
  , (char)0x73, (char)0x65, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
  , (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};
int g_n32Prod_ConfigPwTestULen = 24;
char g_acProd_ConfigPwTestUFrameBuf[24] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x76, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32Prod_ConfigPwTestDLen = 24;
char g_acProd_ConfigPwTestDFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x72, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32RD_ConfigReadLen = 24;
char g_acRD_ConfigReadFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x79, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32RD_ConfigDnLen = 24;
char g_acRD_ConfigDnFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x80, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节


int g_n32RD_MotorPIDDnLen = 24;
char g_acRD_MotorPIDDnFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x83, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32RD_MotorPIDReadLen = 24;
char g_acRD_MotorPIDReadFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x84, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节
////单帧获取数据帧指令
//char acGetSickOneFrameBuf[24]			= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x0F, (char)0x73, (char)0x52, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61,(char)0x05};
//int nGetSickOneFrameBufSize = 24;

////连续获取数据帧指令
//char acGetSickContinueFrameBuf[26]		= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x11, (char)0x73, (char)0x45, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20, (char)0x01,(char)0x33};	
//int nGetSickContinueFrameBufSize = 26;
//
////停止连续获取数据帧指令
//char acStopGetSickContinueFrameBuf[26]	= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x11, (char)0x73, (char)0x45, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20, (char)0x00,(char)0x32};	
//int nStopGetSickContinueFrameBufSize = 26;

//单帧获取数据帧指令
char acGetSickOneFrameBuf[34] = { 0xFF, 0xAA, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07, 
								  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 
								  0x00, 0x00, 0x00, 0x1A, 0xEE, 0xEE};
int nGetSickOneFrameBufSize = 34;

//连续获取数据帧指令
char acGetSickContinueFrameBuf[34] = { 0xFF, 0xAA, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07, 
									   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
									   0x00, 0x01, 0x00, 0x18, 0xEE, 0xEE};
int nGetSickContinueFrameBufSize = 34;

//停止连续获取数据帧指令
 char acStopGetSickContinueFrameBuf[34]= { 0xFF, 0xAA, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07, 
										   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
										   0x00, 0x00, 0x00, 0x19, 0xEE, 0xEE};
 int nStopGetSickContinueFrameBufSize = 34;

//复位次数查询
char acInqResetNumBuf[24]				= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0x5B, (char)0x4e, (char)0x20, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};
int nInqResetNumBufLength = 24;
//清除复位次数
char acClearResetNumBuf[24]				= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0x5A, (char)0x4e, (char)0x20, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};
int nClearResetNumBufLength	= 24;

char g_cPauseBuf[25] = {0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x11, 0x73,0xa0, 0x4E, 
			0x20, 0x4C, 0x4D, 0x44, 0x73, 0x63, 0x61, 0x6E, 0x64, 0x61, 0x74, 0x61, 0x20, 0x01};	


int g_n32DI_StartLen = 25;
char g_acDI_StartFrameBuf[25] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x11, (char)0x73, (char)0xB0, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20, (char)0x01	
};//开启故障检测

int g_n32DI_StopLen = 25;
char g_acDI_StopFrameBuf[25] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x11, (char)0x73, (char)0xB0, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20, (char)0x00	
};//关闭故障检测

int g_n32UART_StartLen = 25;
char g_acUART_StartFrameBuf[25] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x11, (char)0x73, (char)0xB1, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20, (char)0x01	
};//开启故障检测

int g_n32UART_StopLen = 25;
char g_acUART_StopFrameBuf[25] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x11, (char)0x73, (char)0xB1, (char)0x4E, (char)0x20, (char)0x4C, (char)0x4D, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6E, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20, (char)0x00	
};//关闭故障检测


//广播帧内容及长度
// char acBroadcastFrameBuf[14] = {(char)0xFF, (char)0xFF, (char)0x63, (char)0x00, (char)0x0E, (char)0x00, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF};
// int nBroadcastFrameLength = 14;
//广播
char acBroadcastFrameBuf[30+1]			= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x16, (char)0x73, (char)0x63, (char)0x4e, (char)0x20, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20,\
											(char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF};
int nBroadcastFrameLength = 31;
//广播2
 char Broad[34]={0xFF,0xAA,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1B,0xEE,0xEE};
int nBroad = 34;

//广播重置Ip
char acBroadcastIPRstFrameBuf[36+1]			= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x1C, (char)0x73, (char)0xC1, (char)0x4e, (char)0x20, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20,\
											(char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF, (char)0xFF};
int nBroadcastIPRstFrameLength = 37;

int acBeatFrameLength = 24;
char acBeatFrameBuf[24]					= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0x5e, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};



int g_n32RD_MotorSpeedReadLen = 24;
char g_acRD_MotorSpeedReadFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0x85, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32TemperRecordReadLen = 24;
char g_acRD_TemperRecordReadFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0xB2, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32TemperRecordClearLen = 24;
char g_acRD_TemperRecordClearFrameBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
		, (char)0x73, (char)0xB3, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
		, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};//激光功率调节

int g_n32Dust_ReadLen = 25;
char g_acDust_ReadBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
, (char)0x73, (char)0xc0, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

int g_n32Dust_InitLen = 24;
char g_acDust_InitBuf[1024] = 
{
(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
, (char)0x73, (char)0xc2, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

int g_n32Dust_Test = 25;
char g_n32Dust_TestBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
, (char)0x73, (char)0xd0, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};

//修正表查询指令
char acXiuzhengbiaoQueryBuf[24]			= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0x59, (char)0x4e, (char)0x00, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};
int nXiuzhengbiaoQueryBufSize = 24;

//修正表查询指令
char acXiuzhengbiaoQueryBuf1[24]			= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0x5d, (char)0x4e, (char)0x00, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};
int nXiuzhengbiaoQueryBufSize1 = 24;



int g_n32Prod_ConfigHeatTestFlagLen = 25;
char g_acProd_ConfigHeatTestFlagBuf[1024] = 
{
	(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10
, (char)0x73, (char)0xc3, (char)0x4e, (char)0x51, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73
, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20
};


char acSystemFlashResetNumBuf[24]				= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0xC4, (char)0x4e, (char)0x20, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};
int nSystemFlashRestLength	= 24;

char acFactorFlashResetNumBuf[24]				= {(char)0x02, (char)0x02, (char)0x02, (char)0x02, (char)0x00, (char)0x00, (char)0x00, (char)0x10, (char)0x73, (char)0xC5, (char)0x4e, (char)0x20, (char)0x4c, (char)0x4d, (char)0x44, (char)0x73, (char)0x63, (char)0x61, (char)0x6e, (char)0x64, (char)0x61, (char)0x74, (char)0x61, (char)0x20};
int nFactorFlashLength	= 24;


u8 BCC_CHECK(u8 *Buf,u16 u16_Check_Length)
{	
    u16  i;
	u8 u8_BCC=0;
	for(i=0; i<u16_Check_Length-1; i++)
		u8_BCC^=Buf[i];
	return u8_BCC;
}
u8 CHECK_BCC(u8 *Buf,u16 u16_Check_Length)
{	
    u16  i;
	u8 u8_BCC=0;
	for(i=0; i<u16_Check_Length-4; i++)
	{
		u8_BCC^=Buf[i];
	}
	if(u8_BCC==Buf[u16_Check_Length-3])
	{
		return 1;
	}
	else
	{
		return 0;
	}
	
}

unsigned char * ZhiLing(unsigned char *All, unsigned char *pn,int YuLiu)//YuLiu默认为0，需要修改预留则设置为1,pn为需要修改的，All为全部指令;
{
	//0x00,0x00帧长，2(位置)
	//0x00,0x00帧序号，4
	//0x00,0x00,0x00,0x00时间戳0x00,时,分,秒,6
	//0x01校验类型，10
	//0x01请求指令，11,
	//0x00,0x07激光类型 导航激光器，12
	//0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 预留字节，14
	//0x00主命令号，22
	//0x00从命令号，23
	//0x00预留参数1,24
	//0x00预留参数2,25
	unsigned char zhiling[26]={0xFF,0xAA,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
	if(YuLiu==0)
	{
		memcpy(&zhiling[2],pn,12);
		memcpy(&zhiling[22],pn+12,2);
		memcpy(&All[0],zhiling,26);
	}
	else
	{
		memcpy(&zhiling[2],pn,24);
		memcpy(&All[0],zhiling,26);
	}
	return All;
}

//APD指令
unsigned char apdjc_zhiling_S[34]={0};
int apdjc_zhilingSize_S=34;
unsigned char apdjc_zhiling[36]={0};
int apdjc_zhilingSize=36;
//PID指令
unsigned char pid_zhiling_S[34]={0};
int pid_zhilingSize_S=34;
unsigned char pid_zhiling[40]={0};
int pid_zhilingSize=40;
//激光功率测试指令
unsigned char LaserTest_zhiling[34]={0};
int LaserTest_zhilingSize=34;
//APD高压测试指令
unsigned char APDTest_zhiling[34]={0};
int APDTest_zhilingSize=34;
//系统基本参数
unsigned char BasicState_zhiling[34]={0};
int BasicState_zhilingSize=34;
unsigned char BasicStateWR_zhiling[92]={0};
int BasicStateWR_zhilingSize=92;
//开启加热
unsigned char Heate_zhiling[34]={0};
int Heate_zhilingSize=34;
//重启设备
unsigned char Reset_zhiling[34]={0};
int Reset_zhilingSize=34;
//Ip和端口
unsigned char IpPort_zhiling_S[34]={0};
int IpPort_zhilingSize_S=34;
unsigned char IpPort_zhiling[51]={0};
int IpPort_zhilingSize=51;
//单点模式下获取单次数据
unsigned char Single_zhiling[34]={0};
int Single_zhilingSize=34;
//靶标获取过程中上位机发送下位机指令
unsigned char LMGetting_zhiling[34] = { 0 };
int LMGetting_zhilingSize = 34;
//靶标设置上位机发给下位机的第一包指令
unsigned char LMSettingFir_zhiling[36] = { 0 };
int LMSettingFir_zhilingSize = 36;
//心跳
unsigned char LaserHeart_zhiling[34]={0xFF,0xAA,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x10,0x00,0x00,0xAA,0xBB,0xCC,0xDD};
int LaserHeart_zhilingSize=34;
//激光运行状态指令，定时发送
unsigned char LaserState_zhiling[34]={0xFF,0xAA,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x02,0x00,0x00};
int LaserState_zhilingSize=34;
//硬件及版本号
unsigned char Version_zhiling[34]={0};
int Version_zhilingSize=34;
//复位信息
unsigned char Restar_zhiling[34];
int Restar_zhilingSize=34;
//电机测试指令
unsigned char DianJiTest_zhiling[34]={0};
int DianJiTest_zhilingSize=34;
////高阈值修正表查询指令
//unsigned char HYuZhiSearch_zhiling[34]={0};
//int HYuZhiSearch_zhilingSize=34;
////低阈值修正表查询指令
// unsigned char LYuZhiSearch_zhiling[34]={0};
//int LYuZhiSearch_zhilingSize=34;
//高阈值修正表查询指令
unsigned char XiuZhengSearch_zhiling[34]={0xFF,0xAA,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x0E,0x00,0x00};
int XiuZhengSearch_zhilingSize=34;
//反射率表查询指令
unsigned char FanSheLvSearch_zhiling[34]={0xFF,0xAA,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x13,0x00,0x00};
int FanSheLvSearch_zhilingSize=34;
//码盘偏心表查询指令
unsigned char EncoderSearch_zhiling[34]={0xFF,0xAA,0x00,0x1E,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05,0x18,0x00,0x00};
int EncoderSearch_zhilingSize=34;
//脉宽修正烧写指令
unsigned char ShaoXie_zhiling[34]={0};
int ShaoXie_zhilingSize=34;
//灰尘检测查询
unsigned char DustTest_zhiling[34]={0};
int DustTest_zhilingSize=34;
//灰尘检测初始化指令
unsigned char DustReset_zhiling[34]={0};
int DustReset_zhilingSize=34;


//模拟AGV速度设置指令
unsigned char SpeedSet_zhiling[50]={0};
unsigned char GetTimeStamp_zhiling[50] = { 0 };//获取激光器时间戳
int SpeedSet_zhilingSize=0;
int GetTimeStamp_zhilingSize = 0;
//模拟AGV获取位置指令02 73 4D 4E 20 6D 4E 50 4F 53 47 65 74 50 6F 73 65 20 31 03
unsigned char GetPose_zhiling[20]={0x02,0x73,0x4D,0x4E,0x20,0x6D,0x4E,0x50,0x4F,0x53,0x47,0x65,0x74,0x50,0x6F,0x73,0x65,0x20,0x31,0x03};
int GetPose_zhilingSize=20;

//靶标探测模式
unsigned char LandmarkModeSet_zhiling[36] = { 0xFF, 0xAA, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07, 
											0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x01, 
											0x00, 0x00, 0x00, 0x50};
int LandmarkModeSet_zhilingSize=36;

//Mapping模式
//FFAA002E0000000000000101000700000000000000000604 000000 02 0000 001400 00 00 00 00 00 00 00 00 00 00 00 00 50006DEEEE
unsigned char MappingModeSet_zhiling[50] = { 0xFF, 0xAA, 0x00, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07, 
											0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x02, 
											0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
											0x00, 0x00, 0x00, 0x50,0x00, 0x6D,0xEE, 0xEE};
int MappingModeSet_zhilingSize=50;
//FFAA0020000000000000010100070000000000000000060400000004010000000020EEEE
//导航模式
unsigned char NaviModeSet_zhiling[36] = {0xFF, 0xAA, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07, 
											0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, 0x04, 
											0x01, 0x00, 0x00, 0x00};
int NaviModeSet_zhilingSize=36;
//偏心修正时，获取扫描靶标信息
unsigned char PXGetLmIndo_zhiling[34] = { 0xFF, 0xAA, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x07,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x1A, 0x00, 0x00, 0x00, 0x00,0x00, 0x01};
int PXGetLmIndo_zhilingSize = 34;